##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.18.0-B7] date: [Thu Mar 02 16:37:45 MST 2023]
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

######################################
# target
######################################
TARGET = firmware

######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT = -Og
# OPT = -O3

#######################################
# paths
#######################################
# Build path
BUILD_DIR = ./build
OBJ_DIR = ${BUILD_DIR}/obj
BIN_DIR = ${BUILD_DIR}/bin
DEP_DIR = ${BUILD_DIR}/dep

DIRS = ${OBJ_DIR} ${BIN_DIR} ${DEP_DIR}

#######################################
# programming
#######################################
WRITE_START = 0x08000000
PROGRAMMER = CUBE
PORT = COM11
BAUD = 115200
# CUBE_PROGRAMMER_ARGS = -c port=swd freq=2400 mode=hotplug ap=0 speed=Reliable -w ${BIN_DIR}/${TARGET}.bin ${WRITE_START} -v -g
CUBE_PROGRAMMER_ARGS = -c port=${PORT} br=${BAUD} P=even db=8 -w ${BIN_DIR}/${TARGET}.bin ${WRITE_START} -v -g


######################################
# source
######################################
# HAL C sources
SRCS_C =  \
stm32f4xx_hal.c \
stm32f4xx_hal_cortex.c \
stm32f4xx_hal_dma.c \
stm32f4xx_hal_dma_ex.c \
stm32f4xx_hal_exti.c \
stm32f4xx_hal_flash.c \
stm32f4xx_hal_flash_ex.c \
stm32f4xx_hal_flash_ramfunc.c \
stm32f4xx_hal_gpio.c \
stm32f4xx_hal_i2c.c \
stm32f4xx_hal_pwr.c \
stm32f4xx_hal_pwr_ex.c \
stm32f4xx_hal_spi.c \
stm32f4xx_hal_tim.c \
stm32f4xx_hal_tim_ex.c \
stm32f4xx_hal_rcc.c \
stm32f4xx_hal_rcc_ex.c \
stm32f4xx_hal_uart.c \

# User C/C++ sources
SRCS_CC	   = $(shell find src -name '*.cc' -exec basename {} \;)
SRCS_C    += $(shell find src -name '*.c' -exec basename {} \;)

SRCS = ${SRCS_CC} ${SRCS_C}

# ASM sources
ASM_SOURCES =  \
startup_stm32f405xx.s

# C includes
INCS =  \
-Idrivers/STM32F4xx_HAL_Driver/Inc \
-Idrivers/STM32F4xx_HAL_Driver/Inc/Legacy \
-Idrivers/CMSIS/Device/ST/STM32F4xx/Include \
-Idrivers/CMSIS/Include

INCS += $(addprefix -I,$(shell find inc -type d))
INCS += -I../shared_inc

#######################################
# vpaths
#######################################
VPATH =  $(shell find src -type d)
VPATH += drivers/STM32F4xx_HAL_Driver/Src
# VPATH     += $(BSP_SRC_DIR)
# VPATH     += $(CMSIS_CORE_SRC_DIR)
# VPATH     += $(CMSIS_DEVICE_SRC_DIR)
# VPATH     += $(HAL_SRC_DIR)

#######################################
# openocd
#######################################
# TODO


#######################################
# binaries
#######################################
PREFIX = arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)g++
AS = $(GCC_PATH)/$(PREFIX)g++ -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
DP = $(GCC_PATH)/$(PREFIX)objdump
SZ = $(GCC_PATH)/$(PREFIX)size
else
CC = $(PREFIX)g++
AS = $(PREFIX)g++ -x assembler-with-cpp
CP = $(PREFIX)objcopy
DP = $(PREFIX)objdump
SZ = $(PREFIX)size
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S

#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m4

# fpu
FPU = -mfpu=fpv4-sp-d16

# float-abi
FLOAT-ABI = -mfloat-abi=hard

# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

# macros for gcc
# AS defines
AS_DEFS =

# C defines
C_DEFS =  \
-DUSE_HAL_DRIVER \
-DSTM32F405xx


# AS includes
AS_INCLUDES =


# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

CFLAGS 		+= $(MCU) $(C_DEFS) $(INCS) $(OPT) -Wall -Wpedantic -Wextra -fdata-sections -ffunction-sections
HAL_CFLAGS 	+= $(MCU) $(C_DEFS) $(INCS) $(OPT) -Wall -fdata-sections -ffunction-sections

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif


ifeq (${PROGRAMMER}, CUBE)
	ifeq (${OS}, WINDOWS_NT)
		EXT = .exe
	else
		EXT =
	endif
endif

OCD_DIR    = /usr/share/openocd/scripts
# OCDFLAGS   = -f interface/stlink-v2.cfg -f target/${CHIP_NAME_LC}x.cfg
OCDFLAGS   = -f interface/stlink.cfg -f target/stm32f4x.cfg


# Generate dependency informationINCS	  = $(addprefix -I,$(shell find inc -type d))INCS	  = $(addprefix -I,$(shell find inc -type d))INCS	  = $(addprefix -I,$(shell find inc -type d))
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"


#######################################
# LDFLAGS
#######################################
# link script
LDSCRIPT = STM32F405RGTx_FLASH.ld

# libraries
LIBS = -lc -lm -lnosys -lrdimon
LIBDIR =
LDFLAGS = $(MCU) --specs=rdimon.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections

#######################################
# build the application
#######################################
# list of objects
OBJECTS_C = $(addprefix $(OBJ_DIR)/,$(SRCS_C:.c=.o))
# vpath %.c $(sort $(dir $(SRCS_C)))
OBJECTS_CC = $(addprefix $(OBJ_DIR)/,$(SRCS_CC:.cc=.o))
# vpath %.cc $(sort $(dir $(SRCS_CC)))
# list of ASM program objects
OBJECTS_S = $(addprefix $(OBJ_DIR)/,$(ASM_SOURCES:.s=.o))
# vpath %.s $(sort $(dir $(ASM_SOURCES)))

OBJECTS = ${OBJECTS_C} ${OBJECTS_CC} ${OBJECTS_S}

# Deps
DEPS_C     = $(addprefix ${DEP_DIR}/,$(SRCS_C:.c=.d))
DEPS_CC    = $(addprefix ${DEP_DIR}/,$(SRCS_CC:.cc=.d))
DEPS       = ${DEPS_C} ${DEPS_CC}

.PHONY: all

# default action: build all
all: info program

-include $(DEPS)

# So I can silence the warning from the HAL lib
${OBJ_DIR}/stm32f4xx%.o : stm32f4xx%.c | ${DIRS}
	@echo "[C]			$(notdir $<)"
	@$(CC) $(HAL_CFLAGS) -c -o $@ $< -MMD -MF ${DEP_DIR}/$(*F).d

${OBJ_DIR}/%.o : %.c | ${DIRS}
	@echo "[C]			$(notdir $<)"
	@$(CC) $(CFLAGS) -c -o $@ $< -MMD -MF ${DEP_DIR}/$(*F).d

${OBJ_DIR}/%.o : %.cc | ${DIRS}
	@echo "[CC]			$(notdir $<)"
	@$(CC) $(CFLAGS) -c -o $@ $< -MMD -MF ${DEP_DIR}/$(*F).d

$(OBJ_DIR)/%.o: %.s Makefile | $(DIRS)
	@echo "[S]			$(notdir $<)"
	@$(AS) -c $(CFLAGS) $< -o $@

$(BIN_DIR)/$(TARGET).elf: ${OBJECTS} | ${DIRS}
	@echo "[LD]			$(TARGET).elf"
	@$(CC) $(OBJECTS) $(LDFLAGS) -o $@
	@$(DP) -St $@ >$(BIN_DIR)/$(TARGET).lst
	$(SZ) $@

$(BIN_DIR)/%.hex: $(BIN_DIR)/%.elf | $(DIRS)
	@echo "[LD]			$(TARGET).hex"
	@$(HEX) $< $@
	$(SZ) $@

$(BIN_DIR)/%.bin: $(BIN_DIR)/%.elf | $(DIRS)
	@echo "[LD]			$(TARGET).bin"
	@$(BIN) $< $@
	@echo "*******SUCCESS*******"

compile: $(BIN_DIR)/$(TARGET).bin $(BIN_DIR)/$(TARGET).hex

upload:
	python ../tools/command_sender.py ${PORT} ${BAUD} ui_upload
	if [ ${PROGRAMMER} = CUBE ] ; then \
		STM32_Programmer_CLI${EXT} ${CUBE_PROGRAMMER_ARGS} ; \
	fi \

program: compile upload

info:
	@echo "[Build path]		${DIRS}"
	@echo "[Includes] 		${INCS}"
	@echo "[Objects] 		${OBJECTS}"
	@echo "[Dependencies]	${DEPS}"
	@echo "[vpath] 			${VPATH}"

dirs: ${DIRS}
${DIRS}:
	@echo "[MKDIR]		$@"
	@mkdir -p $@

openocd:
	openocd $(OCDFLAGS)

#######################################
# clean up
#######################################
clean:
	-rm -fR $(BUILD_DIR)

# *** EOF ***