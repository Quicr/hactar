##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [4.5.0-RC5] date: [Wed Mar 26 13:36:39 MDT 2025]
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

SHELL := /bin/bash
.ONESHELL:

######################################
# target
######################################
TARGET = ui

######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT = -Os
# OPT = -O3

#######################################
# paths
#######################################
# Build path
BUILD_DIR = ./build

#######################################
# programming
#######################################
WRITE_START = 0x08000000
PORT =
BAUD = 115200
CUBE_PROGRAMMER_ARGS_SWD = -c port=swd freq=2400 mode=normal ap=0 speed=Reliable -w ${BUILD_DIR}/${TARGET}.hex ${WRITE_START} -v -g
CUBE_PROGRAMMER_ARGS = -c port=${PORT} br=${BAUD} P=even db=8 -w ${BUILD_DIR}/${TARGET}.bin ${WRITE_START} -v -g

DOCKER_IMAGE = build-hactar-ui
mft=compile

OCD_DIR    = /usr/share/openocd/scripts
OCDFLAGS   = -f interface/stlink.cfg -f target/stm32f4x.cfg

.PHONY: all

# default action: build all
all: info compile

compile: CMakeLists.txt
	cmake -B $(BUILD_DIR)
	cmake --build $(BUILD_DIR) -j

upload: compile
	st-flash --reset --format ihex write ${BUILD_DIR}/${TARGET}.hex

upload_py: compile
	python3 ../../software/hactar-cli/main.py flash --port=${PORT} --chip="ui" \
								 -bin=${BUILD_DIR}/${TARGET}.bin

upload_cube_serial: compile
	python3 ../../software/hactar-cli/main.py flash --port=${PORT} --chip="ui" --use_external_flasher=true
	STM32_Programmer_CLI${EXT} ${CUBE_PROGRAMMER_ARGS}

upload_cube_swd: compile
	STM32_Programmer_CLI${EXT} ${CUBE_PROGRAMMER_ARGS_SWD}

# NOTE - mft is the makefile target if you want to use something other than compile
docker:
	@if ! docker image inspect ${DOCKER_IMAGE} > /dev/null 2>&1; then \
		docker build -t ${DOCKER_IMAGE} .; \
	else
		echo "Docker image already built - skipping"
	fi

	@docker run --rm -e target=${mft} --privileged \
		-v ${PWD}/..:/src \
		-v /dev:/dev \
		-it ${DOCKER_IMAGE}

dirs: ${BUILD_DIR}
${BUILD_DIR}:
	@echo "[MKDIR]		$@"
	@mkdir -p $@

openocd:
	openocd $(OCDFLAGS)

monitor:
	python3 ../../software/hactar-cli/main.py monitor --port=${PORT}

format:
	find inc -iname "*.h" -or -iname "*.hh" | xargs clang-format -i
	find src -iname "*.c" -or -iname "*.cc" | xargs clang-format -i
	find ../shared -iname "*.c" -or -iname "*.cc" | xargs clang-format -i
	find ../shared_inc -iname "*.h" -or -iname "*.hh" | xargs clang-format -i

#######################################
# clean up
#######################################
docker-clean:
	-docker image rm ${DOCKER_IMAGE}

clean:
	-rm -fR $(BUILD_DIR)

info:
	@echo "[Build path]		${BUILD_DIR}"
	@echo "[Includes] 		${INCS}"
	@echo "[Objects] 		${OBJECTS}"
	@echo "[Dependencies]	${DEPS}"
	@echo "[vpath] 			${VPATH}"

# *** EOF ***
